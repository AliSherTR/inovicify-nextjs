// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  password       String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  Account        Account[]
  invoices       Invoice[] 

  @@map("user")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  token_type        String?
  refresh_token     String? @db.String
  access_token      String? @db.String
  id_token          String? @db.String
  scope             String?
  session_state     String?
  expires_at        Int?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  @@unique([provider, providerAccountId])
  @@map("account")
}

model VerficationToken {
  id        String @id @default(auto()) @map("_id") @db.ObjectId 
  email     String
  token     String
  expires   DateTime
}

model PasswordResetToken {
  id        String @id @default(auto()) @map("_id") @db.ObjectId 
  email     String
  token     String
  expires   DateTime
}


model Invoice {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  senderAddress       String
  senderCity          String
  senderPostCode      String
  senderCountry       String

  receiverName        String
  receiverEmail       String
  receiverAddress     String
  receiverCity        String
  receiverPostCode    String
  receiverCountry     String
  userId              String   @db.ObjectId  // Adding back userId to link to User model
  user                User     @relation(fields: [userId], references: [id]) 

  status              invoiceStatus
  invoiceDate         DateTime
  dueDate             DateTime
  paymentTerms        String
  projectDescription  String

  items               Item[]  @relation("InvoiceItems") // Updated relation field
}

model Item {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  quantity  Int
  price     Float

  invoice   Invoice @relation(fields: [invoiceId], references: [id], name: "InvoiceItems" , onDelete: Cascade) // Relation back to Invoice
  invoiceId String  @db.ObjectId // Foreign key to reference the Invoice model
}


enum invoiceStatus {
  PAID
  PENDING
  DRAFT
}